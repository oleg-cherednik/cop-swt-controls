<?xml version="1.0"?>
<project name="cop.common" default="build-binary" basedir=".">
	<description>
		ANT build script for cop.common project
	</description>

	<!-- PROPERTIES -->

	<property name="manifest.path" location="./META-INF/MANIFEST.MF" />
	<property file="${manifest.path}" />

	<tstamp prefix="start">
		<format property="curr.time" pattern="yyyyMMdd-HHmm" />
	</tstamp>

	<property name="eclipse.home" location="${eclipse_home}" />
	<property name="eclipse.plugins" location="${eclipse.home}/plugins" />

	<property name="src.dir" location="src" />
	<property name="bin.dir" location="bin" />
	<property name="test.dir" location="test" />
	<property name="dest.dir" location="build" />

	<property name="dest.head" value="${Bundle-Name}" />
	<property name="dest.src.head" value="${dest.head}.source" />
	<property name="dest.teil" value="${Bundle-Version}.v${start.curr.time}" />

	<property name="dest.name" value="${dest.head}_${dest.teil}" />
	<property name="dest.src.name" value="${dest.src.head}_${dest.teil}" />

	<!-- CLASSPATH CORE -->

	<path id="classpath.core">
		<fileset dir="${eclipse.plugins}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="classpath.test">
		<pathelement location="${bin.dir}" />
		<fileset dir="C:\Programs\apache-ant-1.8.1\lib">
			<include name="hamcrest-all-1.3.0RC1.jar" />
		</fileset>
	</path>

	<!-- TARGETS -->

	<!-- Check folder exists -->

	<available file="${dest.dir}" type="dir" property="dest.dir.exsists" description="Check id destination directory exists" />
	<available file="${bin.dir}" type="dir" property="bin.dir.exsists" description="Check id binary directory exists" />

	<!-- Create folder -->

	<target name="create-binary-dir" unless="${bin.dir.exsists}">
		<mkdir dir="${bin.dir}" />
	</target>

	<target name="create-destination-dir" unless="${dest.dir.exsists}">
		<mkdir dir="${dest.dir}" />
	</target>

	<!-- Remove -->

	<target name="remove" depends="remove-binary-dir, remove-destination-dir" description="Remove binary and destination folders" />

	<target name="remove-binary-dir" unless="${bin.dir.exsists}" description="Remove binary folder">
		<delete dir="${bin.dir}" />
	</target>

	<target name="remove-destination-dir" unless="${dest.dir.exsists}" description="Remove destination folder">
		<delete dir="${dest.dir}" />
	</target>

	<!-- Clean -->

	<target name="clean" depends="clean-binary-dir, clean-destination-dir" description="Clean binary and destination folders" />

	<target name="clean-binary-dir" if="${bin.dir.exsists}" description="Remove all binary files">
		<delete includeemptydirs="true">
			<fileset dir="${bin.dir}" includes="**/*" />
		</delete>
	</target>

	<target name="clean-destination-dir" if="${dest.dir.exsists}" description="Remove all destination files">
		<delete includeemptydirs="true">
			<fileset dir="${dest.dir}" includes="**/*" />
		</delete>
	</target>

	<!-- Build -->

	<target name="compile" depends="create-binary-dir, clean-binary-dir" description="Compile source">
		<javac srcdir="${src.dir}" destdir="${bin.dir}" includeantruntime="false">
			<classpath refid="classpath.core" />
		</javac>
	</target>

	<target name="build-binary" depends="compile, create-destination-dir" description="Create binary *.jar archive">
		<jar jarfile="${dest.dir}\${dest.name}.jar" manifest="${manifest.path}">
			<fileset dir="${bin.dir}">
				<exclude name="**/${dest.head}_*.jar" />
				<exclude name="**/.svn" />
			</fileset>
		</jar>
	</target>

	<target name="build-source" depends="create-destination-dir" description="Create source *.jar archive">
		<jar jarfile="${dest.dir}\${dest.src.name}.jar" manifest="${manifest.path}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.jar" />
				<exclude name="**/.svn" />
			</fileset>
		</jar>
	</target>

	<target name="build-project-release" depends="clean, build-binary, build-source, run-tests" description="Build release version" />

	<!-- JUnit -->

	<target name="compile-tests" depends="create-binary-dir">
		<javac srcdir="${test.dir}" destdir="${bin.dir}" includeantruntime="false">
			<classpath refid="classpath.core" />
		</javac>
	</target>

	<target name="run-tests" depends="compile, compile-tests" description="Run tests">
		<junit printsummary="no" fork="yes" haltonfailure="yes">
			<test name="cop.TestSuit" />
			<formatter type="plain" />
			<classpath refid="classpath.test" />
		</junit>
	</target>
</project>